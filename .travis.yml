language: cpp
sudo: false
env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${SECRET_ACCESS_TOKEN} environment variable.
    - secure: Vmw+Hg9AxtivUH6N7FOlm17gHdENPmpoGhnetRslQM8p6UlK/HrsigS8ektD3FagVyn0BeMIU896aQgCCCV+cXSIFqyk2gS6LRvTC8M8QMkD5VtGvN8NCoUoEU+aCiOv/nI33p54787/4AnxSAgIFrGNUZf5ogKckJbnIwgDw0Iz1L8HPb2tnTb2Y7G+qSp+g+QpJh+mcTLXzTBFJ0irPIVvn15EBZtvV3avVSuiZY+PidUJnZLm/CNJnwysY9QuBDTJRPUSVbGr23vrCDVrCNl5YvnlVFY4TJzM+l4x0Ln6Y1lrvLRmp7VUS9aIf8NQ99X/txOMIPt/YMkiQSLdGI4R2FvcjtsWN+UnG93H+KIGWcggSKUkradmuY6pwB0GWjXUGjzKaDIrgUs9b3VUTdxscBKmW+/bFZBOF3m5/71lGiKNSJ6N21vlwWiXdgX5Y2mOCIzD4dFrgfiCUCEM6ISIx6RZzWvw5wYPxjoLF/eNywKtMODlQdo9170ckh26zctA3nLvwi+zOcMNqUTg+r4/eMPf0W99P2gih5kdx9WqWzKMQdVrGDDy/GlOi6gb2tUcsagCYxhD7KJ4Ejl16ogENXFBb28dH8RX3r7CPdlav2yDA+TYzqQmtYENEFUIVxCT1XNORD2/bZ2qcNI2qmmANubEBUHwGPhWc49WOQw=

    # DEFAULTS FOR COMPILERS
    - C_COMPILER=clang-3.5
    - CXX_COMPILER=clang++-3.5
    # TODO (bewo): Reenable Unit tests
    - UNIT_TESTS=false
    - BUILD_TYPE=Release
  matrix:
    - BOOST_VERSION=1.57.0
    - BOOST_VERSION=1.58.0
    - BOOST_VERSION=trunk

matrix:
  allow_failures:
    - env: BOOST_VERSION=trunk
    - env: CXX_COMPILER=clang++-3.7

  include:
    # docs
    - env: DOCUMENTATION=true

    # clang 3.5
    - env: C_COMPILER=clang-3.5 CXX_COMPILER=clang++-3.5
      compiler: clang
      addons: &clang35
        apt:
          packages: ["clang-3.5"]
          sources: &sources ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.5", "llvm-toolchain-precise-3.6"]

    # clang 3.6
    - env: C_COMPILER=clang-3.6 CXX_COMPILER=clang++-3.6
      compiler: clang
      addons: &clang36
        apt:
          packages: ["clang-3.6"]
          sources: &sources ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.6"]

    # clang 3.6
    - env: C_COMPILER=clang-3.7 CXX_COMPILER=clang++-3.7
      compiler: clang
      addons: &clang36
        apt:
          packages: ["clang-3.7"]
          sources: &sources ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.7"]

    # gcc 4.8
    # gcc 4.9
    # gcc 5.0
    - env: C_COMPILER=gcc-4.8 CXX_COMPILER=g++-4.8
      compiler: gcc
      addons: &gcc48
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.8']

    - env: C_COMPILER=gcc-4.9 CXX_COMPILER=g++-4.9
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']

    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5
      compiler: gcc
      addons: &gcc50
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5']


    - env: C_COMPILER=clang-3.5 CXX_COMPILER=clang++-3.5 BUILD_TYPE=Debug
      addons: *clang35
    - env: C_COMPILER=clang-3.6 CXX_COMPILER=clang++-3.6 BUILD_TYPE=Debug
      addons: *clang36
    - env: C_COMPILER=clang-3.7 CXX_COMPILER=clang++-3.7 BUILD_TYPE=Debug
      addons: *clang37

    - env: C_COMPILER=gcc-4.8 CXX_COMPILER=g++-4.8 BUILD_TYPE=Debug
      addons: *gcc48
    - env: C_COMPILER=gcc-4.9 CXX_COMPILER=g++-4.8 BUILD_TYPE=Debug
      addons: *gcc49
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5 BUILD_TYPE=Debug
      addons: *gcc50


# Those addons apply only to the documentation job.
addons: *clang35

install:
  - export CXX=`which ${CXX_COMPILER}`
  - echo $CXX
  - export CC=`which ${C_COMPILER}`
  - echo $CC

  ############################################################################
  # All the dependencies are installed to the deps/ subdirectory.
  ############################################################################
  - DEPS_DIR="${PWD}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install Boost headers
  ############################################################################
  - BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz"
  - if [[ "${BOOST_VERSION}" == "1.57.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.58.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "trunk" ]];  then BOOST_URL="http://github.com/boostorg/boost.git"; fi

  - if [[ "${BOOST_VERSION}" != "trunk" ]]; then mkdir boost && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C boost; fi
  - if [[ "${BOOST_VERSION}" == "trunk" ]]; then travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL}; fi
  - (cd boost && ./bootstrap.sh && ./b2 --with-system --with-test)

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - CMAKE_URL=http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.tar.gz
  - mkdir cmake
  - travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - export PATH=${PWD}/cmake/bin:${PATH}


  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.9.1.linux.bin.tar.gz"
  - mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
  - export PATH=${PWD}/doxygen/bin:${PATH}


before_script:
  ############################################################################
  # Go back to the root of the project.
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}

  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Check baseline memory usage; useful to know when OOMs occur
  ############################################################################
  - free
  - vmstat
  - ps aux --sort=-rss | head -n 10

  ############################################################################
  # Setup the build directory
  ############################################################################
  - mkdir build/
  - cd build/

  - git config --global user.name "Travis bot"
  
  # We only use the memory checker for some builds, because otherwise it takes
  # too long for very little benefit. Concretely, if we have a memory leak or
  # something like that, it's either a compiler bug or an error that will show
  # up regardless of the Boost version. Hence, we use the memory checker only
  # once for each compiler.

  - export BOOST_ROOT=${DEPS_DIR}/boost

  - cmake ../src -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DBOOST_LIBRARYDIR=${DEPS_DIR}/boost/lib -DBOOST_ROOT=${DEPS_DIR}/boost -DCMAKE_BUILD_TYPE=${BUILD_TYPE}


script:

  ############################################################################
  # Build Project if DOCUMENTATION=true 
  ############################################################################
  
  - if [[ "${DOCUMENTATION}" != "true" ]]; then make; fi 

  ############################################################################
  # Only push the documentation when we're on master, otherwise just make sure
  # it builds properly. 
  ############################################################################
  - if [[ "${DOCUMENTATION}" == "true" ]]; then make doc; git config --global user.email "benedikt.wolters@rwth-aachen.de"; git config --global user.name "Travis Doxygen Builder"; git clone https://${SECRET_ACCESS_TOKEN}@github.com/geneial/geneial.github.io.git; cd geneial.github.io/; mkdir -p doc; cp -r ../doc/html ./doc/;  git add .;  git commit -m "Updated documentation for geneial"; git push origin master; fi 

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - export CTEST_PARALLEL_LEVEL=2 # Run unit tests on two cores
  - if [[ "${UNIT_TESTS}" == "true" ]]; then make test -k -j2; fi

notifications:
  email:
    on_failure: always
    on_success: change
